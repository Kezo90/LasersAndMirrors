
package hu.unideb.inf.lasersandmirrors.gui;

import hu.unideb.inf.lasersandmirrors.Controller;
import hu.unideb.inf.lasersandmirrors.DB;
import hu.unideb.inf.lasersandmirrors.Game;
import hu.unideb.inf.lasersandmirrors.Level;
import hu.unideb.inf.lasersandmirrors.Settings;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultListModel;
import org.slf4j.LoggerFactory;

/**
 * Szerkesztő menü.
 *
 * @author Kerekes Zoltán
 */
public class EditMenu extends javax.swing.JPanel implements GameMenu {

	/** Az adott osztály naplózója. */
	private static final org.slf4j.Logger log = LoggerFactory.getLogger(EditMenu.class);
	
	/**
	 * Creates new form EditMenu.
	 */
	@SuppressWarnings("unchecked")
	public EditMenu() {
		initComponents();
		
		// tooltip
		levelsTitleLabel.setToolTipText(
				"<html>"
					+ "<p>"
						+ "<strong>Numbers in brackets:</strong> Lasers, Mirrors and Diamonds on the level."
					+ "</p>"
				+ "</html>");
		
		setEditorAction(EditorAction.SELECT);
		updateList();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        levelsContainer = new javax.swing.JPanel();
        levelsTitleLabel = new javax.swing.JLabel();
        levelsListScrollPane = new javax.swing.JScrollPane();
        levelsList = new javax.swing.JList();
        saveContainer = new javax.swing.JPanel();
        editButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        outputField = new javax.swing.JTextField();
        goBackButton = new javax.swing.JButton();
        toolsContainer = new javax.swing.JPanel();
        addObjectLabel = new javax.swing.JLabel();
        toggleBtnSelect = new javax.swing.JToggleButton();
        toggleBtnAdd = new javax.swing.JToggleButton();
        toggleBtnRemove = new javax.swing.JToggleButton();
        objectTypeSelectorComboBox = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(227, 227, 227));
        setName("editMenu"); // NOI18N
        setPreferredSize(new java.awt.Dimension(224, 650));

        titleLabel.setBackground(new java.awt.Color(102, 102, 102));
        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Edit Menu");

        levelsContainer.setOpaque(false);

        levelsTitleLabel.setText("Existing levels");

        levelsList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        levelsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        levelsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        levelsList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        levelsList.setDoubleBuffered(true);
        levelsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                levelsListValueChanged(evt);
            }
        });
        levelsListScrollPane.setViewportView(levelsList);

        javax.swing.GroupLayout levelsContainerLayout = new javax.swing.GroupLayout(levelsContainer);
        levelsContainer.setLayout(levelsContainerLayout);
        levelsContainerLayout.setHorizontalGroup(
            levelsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(levelsListScrollPane)
            .addComponent(levelsTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        levelsContainerLayout.setVerticalGroup(
            levelsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(levelsContainerLayout.createSequentialGroup()
                .addComponent(levelsTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(levelsListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
        );

        saveContainer.setOpaque(false);

        editButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        saveButton.setText("Save as:");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        outputField.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        outputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                outputFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                outputFieldKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout saveContainerLayout = new javax.swing.GroupLayout(saveContainer);
        saveContainer.setLayout(saveContainerLayout);
        saveContainerLayout.setHorizontalGroup(
            saveContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(saveContainerLayout.createSequentialGroup()
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputField))
        );
        saveContainerLayout.setVerticalGroup(
            saveContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(saveContainerLayout.createSequentialGroup()
                .addComponent(editButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(saveContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        goBackButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        goBackButton.setForeground(new java.awt.Color(155, 25, 25));
        goBackButton.setText("Main Menu");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        toolsContainer.setOpaque(false);

        addObjectLabel.setText("Tools");

        toggleBtnSelect.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        toggleBtnSelect.setText("Sel");
        toggleBtnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnSelectActionPerformed(evt);
            }
        });

        toggleBtnAdd.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        toggleBtnAdd.setText("Add");
        toggleBtnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnAddActionPerformed(evt);
            }
        });

        toggleBtnRemove.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        toggleBtnRemove.setText("Rem");
        toggleBtnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleBtnRemoveActionPerformed(evt);
            }
        });

        objectTypeSelectorComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        objectTypeSelectorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Laser", "Mirror", "Diamond" }));

        javax.swing.GroupLayout toolsContainerLayout = new javax.swing.GroupLayout(toolsContainer);
        toolsContainer.setLayout(toolsContainerLayout);
        toolsContainerLayout.setHorizontalGroup(
            toolsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(objectTypeSelectorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(toolsContainerLayout.createSequentialGroup()
                .addComponent(toggleBtnSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toggleBtnAdd)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toggleBtnRemove))
            .addGroup(toolsContainerLayout.createSequentialGroup()
                .addComponent(addObjectLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        toolsContainerLayout.setVerticalGroup(
            toolsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolsContainerLayout.createSequentialGroup()
                .addComponent(addObjectLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(toolsContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(toggleBtnSelect)
                    .addComponent(toggleBtnAdd)
                    .addComponent(toggleBtnRemove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(objectTypeSelectorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(levelsContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                    .addComponent(goBackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(toolsContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel)
                .addGap(18, 18, 18)
                .addComponent(levelsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(toolsContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * A kilépés gombot megnyomjuk: visszalép a főmenübe.
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        goBack();
    }//GEN-LAST:event_goBackButtonActionPerformed

	/**
	 * A Play gombot megnyomjuk: betöltia  kijelölt pályát a játék.
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
		String levelName = ((ListItem)levelsList.getSelectedValue()).getValue();
		if(levelName == null){
			Controller.startNewLevel(null);
		} else{
			Controller.loadLevel(levelName);
		}
		updateSaveButtonStatus();
    }//GEN-LAST:event_editButtonActionPerformed

	/**
	 * Betölti a pályát szerkesztésre vagy csak átlép a szerkesztő menübe.
	 * 
	 * <strong>Még nincs implementálva a szerkesztő.</strong>
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String levelName = ((ListItem)levelsList.getSelectedValue()).getValue();
		String outputName = outputField.getText().trim();
		if(outputName == null || outputName.equals(""))
			return;
		if(isLevelExistsInLocalList(outputName) && !levelName.equals(outputName)){
			showWarningLevelExists();
			return;
		}
		try{
			if(DB.isLevelExists(outputName) && !levelName.equals(outputName)){
				showWarningLevelExists();
				return;
			}
		} catch (SQLException ex) {
			log.warn(String.format("Not possible to known: level(%s) exists or not.", outputName));
			return;
		}
		
		Controller.getCurrentLevel().setName(outputName);
		if(levelName != null){
			DB.removeLevel(levelName);
		}
		Controller.saveCurrentLevel();
		updateList();
    }//GEN-LAST:event_saveButtonActionPerformed

	/**
	 * A listában kijelöltünk valamit: a Play gomb elszürkülhet, 
	 * mert az új (szerkesztésnek fenntartott) üres páylát nem tölthetjük be.
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void levelsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_levelsListValueChanged
		editButton.setEnabled(levelsList.getSelectedIndex() != -1);
		
		if(levelsList.getSelectedValue() != null){
			String selectedValue = ((ListItem)levelsList.getSelectedValue()).getValue();
			if(selectedValue == null){
				outputField.setText("");
			} else {
				outputField.setText(selectedValue);
			}
		}
		
		updateSaveButtonStatus();
    }//GEN-LAST:event_levelsListValueChanged

	/**
	 * Gépelés történt a pálya új nevét tartalmazó beviteli mezőn.
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void outputFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outputFieldKeyTyped
        updateSaveButtonStatus();
    }//GEN-LAST:event_outputFieldKeyTyped

	/**
	 * Felengedtek egy billentyűt, mikután gépeltek 
	 * a pálya új nevét tartalmazó beviteli mezőbe.
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void outputFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outputFieldKeyReleased
        updateSaveButtonStatus();
    }//GEN-LAST:event_outputFieldKeyReleased

	/**
	 * A kijelölő gombot megnyomták.
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void toggleBtnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBtnSelectActionPerformed
        setEditorAction(EditorAction.SELECT);
    }//GEN-LAST:event_toggleBtnSelectActionPerformed

	/**
	 * A hozzáadó gombot megnyomták.
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void toggleBtnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBtnAddActionPerformed
        setEditorAction(EditorAction.ADD);
    }//GEN-LAST:event_toggleBtnAddActionPerformed

	/**
	 * A törlő gombot megnyomták.
	 * 
	 * @param evt A kiváltó esemény.
	 */
    private void toggleBtnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleBtnRemoveActionPerformed
        setEditorAction(EditorAction.REMOVE);
    }//GEN-LAST:event_toggleBtnRemoveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addObjectLabel;
    private javax.swing.JButton editButton;
    private javax.swing.JButton goBackButton;
    private javax.swing.JPanel levelsContainer;
    private javax.swing.JList levelsList;
    private javax.swing.JScrollPane levelsListScrollPane;
    private javax.swing.JLabel levelsTitleLabel;
    private javax.swing.JComboBox objectTypeSelectorComboBox;
    private javax.swing.JTextField outputField;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel saveContainer;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JToggleButton toggleBtnAdd;
    private javax.swing.JToggleButton toggleBtnRemove;
    private javax.swing.JToggleButton toggleBtnSelect;
    private javax.swing.JPanel toolsContainer;
    // End of variables declaration//GEN-END:variables

	/** A listaelemek, melyeket a lista létezésekor is tudunk szerkeszteni. */
	private DefaultListModel<ListItem> levelsListItems;
	
	/**
	 * A pályaválasztó menü elemei kérdezhető le.
	 * 
	 * @return A pályaválasztó menü elemei.
	 */
	public DefaultListModel<ListItem> getLevelsListItems(){
		return this.levelsListItems;
	}
	
	/**
	 * Frissíti a felületet aszerint, hogy teljesíthető-e az aktuális pálya.
	 */
	public void updateSaveButtonStatus(){
		Level level = Controller.getCurrentLevel();
		int selectedIndex = levelsList.getSelectedIndex();
		if(level == null || level.getNumberOfDiamonds() == 0
				|| level.getNumberOfLasers() == 0
				|| selectedIndex == -1 
				|| outputField.getText().trim().equals("")){
			saveButton.setEnabled(false);
		} else {
			saveButton.setEnabled(true);
		}
	}
	
	/**
	 * Le lehet kérdezni, hogy a letöltött listában szerepel-e 
	 * a paraméterül kapott néven pálya.
	 * 
	 * @param levelName A pálya neve.
	 * @return Igaz, ha létezik; hamis, ha nem.
	 */
	private boolean isLevelExistsInLocalList(String levelName){
		for (int i = 1; i < levelsListItems.size(); i++) {
			if(levelsListItems.get(i).getValue().equals(levelName))
				return true;
		}
		return false;
	}
	
	/**
	 * Megjelenít egy üzenetet a felhasználó számára, miszerint az adott néven
	 * már létezik pálya.
	 */
	private void showWarningLevelExists(){
		// TODO: warning "Another level exists with same name."
	}
	// TODO objektumok pakolása
	
	/**
	 * A listaelemeket legyártja az adatbázisbeli adatok szerint.
	 */
	@SuppressWarnings("unchecked")
	private void updateList(){
		// A kezdeti állapotban ne tudjuk betölteni vagy menteni
		editButton.setEnabled(false);
		saveButton.setEnabled(false);
		
		// listaelemek módosíthatóvá tétele
		levelsListItems = new DefaultListModel<>();
		levelsList.setModel(levelsListItems);
		
		// listaelemek legyártása
		List<DB.LevelInfo> levelInfos = DB.loadLevelInfos();
		if(levelInfos != null){
			for (DB.LevelInfo levelInfo : levelInfos) {
				levelsListItems.addElement(new ListItem(levelInfo.name, String.format("%s (%s, %s, %s)", 
						levelInfo.name,
						levelInfo.laserCount, 
						levelInfo.mirrorCount, 
						levelInfo.diamondCount)));
			}
		}
		levelsListItems.add(0, new ListItem(null, Settings.EMPTY_LIST_ITEM_STRING));
	}

	@Override
	public void goBack() {
		Controller.startNewLevel(null);
		Game.frame.setGameArea(new WelcomeArea());
		Game.frame.setMenu(new MainMenu());
	}
	
	/**
	 * Szerkesztői műveletek típusai.
	 */
	private enum EditorAction{
		SELECT,
		ADD,
		REMOVE,
	}
	
	/** Az aktuálisan beállított szerkesztői művelet. */
	private EditorAction editorAction;
	
	/**
	 * A szerkesztői műveletet állíthatjuk be.
	 * 
	 * @param action A művelet típusa.
	 */
	private void setEditorAction(EditorAction action){
		toggleBtnAdd.setSelected(false);
		toggleBtnRemove.setSelected(false);
		toggleBtnSelect.setSelected(false);
		objectTypeSelectorComboBox.setEnabled(false);
		
		switch(action){
			case SELECT:
				toggleBtnSelect.setSelected(true);
				break;
				
			case ADD:
				toggleBtnAdd.setSelected(true);
				objectTypeSelectorComboBox.setEnabled(true);
				break;
				
			case REMOVE:
				toggleBtnRemove.setSelected(true);
				break;
				
			default:
				log.warn("Unhandled " + EditorAction.class.getName());
		}
	}
}
